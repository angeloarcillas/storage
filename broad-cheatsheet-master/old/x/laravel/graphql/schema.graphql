## DATA TYPES ##
# ID
# String
# Boolean
# Int
# Float

## DIRECTIVES ##
# @all
# @scalar
# @enum
# @field
# @method
# @upperCase
## ARGS ##
# @append

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find

    posts: [Post!]! @all #get all
    post(id: Int! @eq): Post @find #find specific post
}

## mutation ##
type Mutation {
  createUser(name: String!, email: String!, password: String!): User
  updateUser(id: ID, email: String, password: String): User
  deleteUser(id: ID): User

  # @create - create
  # @update - update
  # @upsert - update / insert
  # @delete - delete
}

## subscription ##
type Subscription {
  newUser: User
}

## SET FIELDS ##
type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    posts: [Post!]! @hasMany
}

type Post {
    id: ID!
    title: String!
    content: String!
    author: User @belongsTo # eloquent- @belongsTo => directives
    # @belongsTo(relation: "user") - rename eloquent
    comments: [Comment!]! @hasMany
}

type Comment {
    id: ID!
    reply: String!
    post: Post! @belongsTo
}

## ENUM - options ##
enum EmploymentStatus {
    INTERN @enum(value: 0)
    EMPLOYEE @enum(value: 1)
    TERMINATED @enum(value: 2)
}

type Employee {
    id: ID!
    name: String
    status: EmploymentStatus!
}

type Query {
    employees: [Employee!]! @all
}

## IMPORT FILE - using <#> ##
#import user.graphql
#import post/*.graphql

## EXTEND ##
type Post {
    title: String
    author: User @belongsTo
}

extend type Query {
    posts: [Post!]! @paginate
}
